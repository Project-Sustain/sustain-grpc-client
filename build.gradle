plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
    // Adds 'test' task
    id 'java'
    // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier gradle versions
    id 'com.google.protobuf' version "0.8.17"
}

group 'org.sustain.census'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.11

// updating the version in our release process.
def grpcVersion = '1.28.1' // CURRENT_GRPC_VERSION
def protocVersion = '3.11.0'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation "com.google.protobuf:protobuf-java-util:${protocVersion}"
    implementation "com.google.protobuf:protobuf-gradle-plugin:0.8.17"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation 'org.json:json:20171018'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8'

    compileOnly "org.apache.tomcat:annotations-api:6.0.53"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'build/generated/source/proto/main/grpc', 'build/generated/source/proto/main/java']
        }
    }

    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// Configure Gradle's test task
test {
    // Use JUnit 5 for testing
    useJUnitPlatform()

    // Show standard out/error from tests
    testLogging {
        showStandardStreams = true
    }
}

task client(type: CreateStartScripts) {
    applicationName = 'client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

// Distribute generated binaries from above tasks into the bin/ folder
applicationDistribution.into('bin') {
    from(client)
    fileMode = 0755 // Make generated binaries executable
}